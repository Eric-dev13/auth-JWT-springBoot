# ===============================================
# = CONFIGURATION DU SERVER WEB EMBARQUE TOMCAT =
# ===============================================
# Spring Boot incluent par défaut un serveur Web intégré préconfiguré, adresse et port du serveur  8080 par défaut.
server:
  port: 9000

# ======================================
# = CONFIGURATION DE LA JOURNALISATION =
# ======================================
logging:
  level:
    # Permet de voir dans la console le port utilisé par Tomcat au démarrage
    org.springframework.boot.web.embedded.tomcat: INFO
    root: INFO
    com.example: DEBUG

# =============================
# = DEFINIR PLUSIEURS PROFILS =
# =============================
# https://www.baeldung.com/spring-profiles

# deux profils : "dev" et "prod". Le profil actif est défini sur "dev"
spring:
  profiles:
    # profil a charger par défaut defini dans application.yml
    # active: dev
    # Profil Maven : peut être activé via la propriété de configuration spring.profiles.active
    #	  Sa valeur sera utilisée pour remplacer l' espace réservé @spring.profiles.active@ dans application.properties ou application.yml
    active: @spring.profiles.active@


---
spring:
  #  Définir des propriétés spécifiques pour chaque profil
  config:
    activate:
      on-profile: dev
  # ============================================
  # = CONFIGURATION DE LA BASE DE DONNEE MySQL =
  # ============================================
  datasource:
    url: jdbc:mysql://localhost:3306/auth_jwt
    username: root
    password:
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      # Generer ou mettre à jour automatiquement les tables de la base de données à partir des classes d'entites.
      # create-drop:
      # create: Crée le schema de BDD et detruit le prédécent
      # none: Désactive DDL
      # update: créer ou mets à jour le schéma de BDD si necessaire
      # validate:
      ddl-auto: create-drop
    # Le moyen le plus simple de vider les requêtes sql vers la sortie standard mais a priori non recommandé
    show-sql: true
    properties:
      hibernate:
        # Pour embellir
        format_sql: true
        #database: mysql
        #database-plateform:
      javax:
        persistence:
          schema-generation:
            scripts:
              # Génère un schéma de BDD avec Spring Boot JPA à partir des des entités
              # Actions ( https://www.baeldung.com/spring-data-jpa-generate-db-schema)
              #       none            - ne génère aucune commande DDL
              #       create          - génère uniquement des commandes de création de base de données
              #       drop            - génère uniquement des commandes de suppression de base de données
              #       drop-and-create - génère des commandes de suppression de base de données suivies de commandes de création
              # action: create
              # create-target: create.sql
              # create-source: metadata

---
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    url: jdbc:mysql://localhost:3306/proddatabase
    username: produser
    password: prodpassword



